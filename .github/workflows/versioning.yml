# Workflow to verify versioning compatibility between base branch and patch versions
name: Verify Versioning Compatibility

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag to compare (e.g., v1.3.0)"
        required: true
        default: "v1.3.0"
        type: string

jobs:
  verify-versioning:
    runs-on:
      - runs-on=${{ github.run_id }}
      - runner=64cpu-linux-arm64
      - extras=s3-cache
      - disk=large
    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4

      - name: Set version fallback
        run: echo "version=${{ github.event.inputs.version || 'v1.3.0' }}" >> $GITHUB_ENV

      - name: Install solc # svm should support arm64 linux
        run: (hash svm 2>/dev/null || cargo install --version 0.2.23 svm-rs) && svm install 0.8.19 && solc --version

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      # Build and test from base branch
      - name: Build base branch CLI
        run: cargo install --force --path crates/cli

      - name: Run setup from base branch and snapshot ~/.openvm
        run: |
          cargo openvm setup --evm
          rm -rf ~/.openvm-base
          mv ~/.openvm ~/.openvm-base

      # - name: Build and keygen examples from base branch
      #   run: |
      #     mkdir -p ./base-outputs/examples
      #     for example in examples/*/; do
      #       if [ -f "$example/Cargo.toml" ]; then
      #         example_name=$(basename "$example")
      #         echo "Building and generating keys for example: $example_name"
      #         cd "$example"
      #         cargo openvm build --no-transpile
      #         cargo openvm keygen --output-dir "../../base-outputs/examples/$example_name"
      #         cd ../..
      #       fi
      #     done

      - name: Build and keygen benchmarks from base branch
        run: |
          mkdir -p ./base-outputs/benchmarks
          for benchmark in benchmarks/guest/*/; do
            if [ -f "$benchmark/Cargo.toml" ]; then
              benchmark_name=$(basename "$benchmark")
              echo "Building and generating keys for benchmark: $benchmark_name"
              cd "$benchmark"
              cargo openvm build --no-transpile
              cargo openvm keygen --output-dir "../../../base-outputs/benchmarks/$benchmark_name"
              cd ../../..
            fi
          done

      # Checkout and test tagged version
      - name: Checkout tagged version
        uses: actions/checkout@v4
        with:
          ref: ${{ env.version }}
          clean: false

      - name: Build tagged CLI
        run: cargo install --force --path crates/cli

      - name: Run setup from tagged version
        run: |
          # TODO: Add --evm after v1.3.0 release
          cargo openvm setup

      # - name: Build and keygen examples from tagged version
      #   run: |
      #     mkdir -p ./tagged-outputs/examples
      #     for example in examples/*/; do
      #       if [ -f "$example/Cargo.toml" ]; then
      #         example_name=$(basename "$example")
      #         echo "Building and generating keys for example: $example_name"
      #         cd "$example"
      #         cargo openvm build --no-transpile
      #         # TODO(yi): Change --vk-output to --output-dir after v1.3.0 release
      #         mkdir -p "../../tagged-outputs/examples/$example_name"
      #         cargo openvm keygen --vk-output "../../tagged-outputs/examples/$example_name/app.vk"
      #         cd ../..
      #       fi
      #     done

      - name: Build and keygen benchmarks from tagged version
        run: |
          mkdir -p ./tagged-outputs/benchmarks
          for benchmark in benchmarks/guest/*/; do
            if [ -f "$benchmark/Cargo.toml" ]; then
              benchmark_name=$(basename "$benchmark")
              echo "Building and generating keys for benchmark: $benchmark_name"
              cd "$benchmark"
              cargo openvm build --no-transpile
              # TODO(yi): Change --vk-output to --output-dir after v1.3.0 release
              mkdir -p "../../../tagged-outputs/benchmarks/$benchmark_name"
              cargo openvm keygen --vk-output "../../../tagged-outputs/benchmarks/$benchmark_name/app.vk"
              cd ../../..
            fi
          done

      # - name: Compare example verification keys
      #   run: |
      #     echo "Comparing example verification keys between base branch and ${{ env.version }}..."
      #     failed=0
      #     for example in examples/*/; do
      #       if [ -f "$example/Cargo.toml" ]; then
      #         example_name=$(basename "$example")
      #         echo "Checking example: $example_name"
      #         if cmp "./base-outputs/examples/$example_name/app.vk" "./tagged-outputs/examples/$example_name/app.vk"; then
      #           echo "‚úÖ $example_name verification keys are identical"
      #         else
      #           echo "‚ùå $example_name verification keys differ"
      #           failed=1
      #         fi
      #       fi
      #     done
      #     if [ $failed -eq 1 ]; then
      #       echo "‚ùå Some example verification keys differ - versioning policy violated"
      #       exit 1
      #     else
      #       echo "‚úÖ All example verification keys are identical"
      #     fi

      - name: Compare benchmark verification keys
        run: |
          echo "Comparing benchmark verification keys between base branch and ${{ env.version }}..."
          failed=0
          for benchmark in benchmarks/guest/*/; do
            if [ -f "$benchmark/Cargo.toml" ]; then
              benchmark_name=$(basename "$benchmark")
              echo "Checking benchmark: $benchmark_name"
              if cmp "./base-outputs/benchmarks/$benchmark_name/app.vk" "./tagged-outputs/benchmarks/$benchmark_name/app.vk"; then
                echo "‚úÖ $benchmark_name verification keys are identical"
              else
                echo "‚ùå $benchmark_name verification keys differ"
                failed=1
              fi
            fi
          done
          if [ $failed -eq 1 ]; then
            echo "‚ùå Some benchmark verification keys differ - versioning policy violated"
            exit 1
          else
            echo "‚úÖ All benchmark verification keys are identical"
          fi

      # Compare all outputs
      # TODO: After v1.3.0 release, just compare the contents of ~/.openvm-base
      # and ~/.openvm
      - name: Compare ~/.openvm contents
        run: |
          echo "üîç Comparing ~/.openvm agg and halo2 outputs between base branch and ${{ env.version }}..."

          failed=0

          # Compare agg.pk with agg_halo2.pk
          if cmp ~/.openvm-base/agg.pk ~/.openvm/agg_halo2.pk; then
            echo "‚úÖ agg.pk and agg_halo2.pk are identical"
          else
            echo "‚ùå agg.pk and agg_halo2.pk differ"
            failed=1
          fi

          # Compare halo2 directories recursively
          if diff -r ~/.openvm-base/halo2 ~/.openvm/halo2; then
            echo "‚úÖ halo2 directories are identical"
          else
            echo "‚ùå halo2 directories differ"
            failed=1
          fi

          if [ $failed -eq 1 ]; then
            echo "‚ùå ~/.openvm outputs differ"
            exit 1
          else
            echo "‚úÖ All checked ~/.openvm outputs are identical"
          fi

      - name: Final summary
        run: |
          echo "üéâ Versioning compatibility verification completed successfully!"
          echo "‚úÖ Setup outputs are identical between base branch and ${{ env.version }}"
          echo "‚úÖ All example verification keys are identical"
          echo "‚úÖ All benchmark verification keys are identical"
          echo "‚úÖ Versioning policy maintained - patch upgrade is backward compatible"
